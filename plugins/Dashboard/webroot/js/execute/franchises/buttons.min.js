"use strict";const addBtn=document.getElementById("add_franchise_btn"),closeBtn=document.getElementById("close_franchise_btn");addBtn.addEventListener("click",()=>{showAddAlert()}),closeBtn.addEventListener("click",()=>{showCloseAlert()});const showCloseAlert=()=>{Swal.fire({title:"Please Wait...",text:"We are getting all open franchises",icon:"info",didOpen:()=>{Swal.showLoading(),getOpenFranchises().then(e=>{swal.fire({title:"Close Franchise",html:'<p>Please select the franchise that you wish to mark as closed:</p><select class="form-control" id="franchise_id" name="franchise_id">'+e.map(e=>`<option value="${e.franchise_id}">${e.franchise_name}</option>`)+"</select>",confirmButtonText:"Save",cancelButtonText:"Cancel",showConfirmButton:!0,showCancelButton:!0,showCloseButton:!0,showLoaderOnConfirm:!0,allowOutsideClick:()=>!Swal.isLoading(),preConfirm:()=>closeFranchise(document.getElementById("franchise_id").value).catch(e=>Swal.showValidationMessage(e)),didOpen:()=>{let e=document.getElementById("franchise_id");$(e).select2({width:"100%",dropdownParent:$(".swal2-container")})}}).then(e=>{e.isConfirmed&&Swal.fire({title:"Franchise Closed",text:"The Franchise Was Successfully Closed",icon:"success"})})}).catch(e=>handleError(e))},allowOutsideClick:()=>!Swal.isLoading(),showConfirmButton:!1,showCancelButton:!1})},getOpenFranchises=async()=>{let e=await fetch("/franchises/get-open",{method:"GET",headers:{Accept:"application/json"}});if(!e.ok)throw new Error("Could not get open franchises");return e.json()},closeFranchise=async e=>{let t=await fetch(`/franchises/manage-close/${e}`,{method:"POST",headers:{"X-Csrf-Token":csrfToken,Accept:"application/json"}});if(!t.ok)throw new Error("Could not close franchise.");return t.json()},showAddAlert=()=>{sessionStorage.clear();Swal.mixin({customClass:{confirmButton:"btn btn-success",denyButton:"btn btn-warning"},buttonsStyling:!1}).fire({title:"Add Franchise",text:"Choose one of the following",icon:"info",confirmButtonText:"Add With Operator",showDenyButton:!0,denyButtonText:"Add To Existing",showCloseButton:!0,showLoaderOnConfirm:!0,preConfirm:()=>getStates().then(e=>{if(e.length)return e;throw new Error("Issue Found")}).catch(e=>{Swal.showValidationError(e)})}).then(e=>{e.isConfirmed?showOperatorCreationAlert(e):e.isDenied&&(Swal.showLoading(),$.when(getOperators(),getStatuses()).then((e,t)=>{showFranchiseCreationAlert(e,t)}))})},showOperatorCreationAlert=e=>{let t="";e.value.forEach(e=>{t+=`<option value="${e.state_id}">${e.full_name}</option>`});Swal.mixin({customClass:{confirmButton:"btn btn-success",denyButton:"btn btn-default"},buttonsStyling:!1}).fire({title:"Create Operator",html:'<form id="create_operator_form" novalidate><div class="form-row"><div class="col-12"><div class="form-group"><label for="first-name">First Name</label><input class="form-control" type="text" id="first-name" name="first_name" required autocomplete="off"><div class="invalid-feedback text-left">First Name is required</div></div></div></div><div class="form-row"><div class="col-12"><div class="form-group"><label for="last-name">Last Name</label><input class="form-control" type="text" id="last-name" name="last_name" required autocomplete="off"><div class="invalid-feedback text-left">Last Name is required</div></div></div></div><div class="form-row"><div class="col-12"><div class="form-group"><label for="phone">Phone Number</label><input class="form-control" type="tel" id="phone" name="phone" required autocomplete="off"><div class="invalid-feedback text-left">Phone is required</div></div></div></div><div class="form-row"><div class="col-12"><div class="form-group"><label for="email">Email</label><input class="form-control" type="email" id="email" name="email" required autocomplete="off"><div class="invalid-feedback text-left">Email is required and must be formatted correctly</div></div></div></div><div class="form-row"><div class="col-12"><div class="form-group"><label for="login">Username/Operator ID</label><input class="form-control" type="text" id="login" name="user_login" required autocomplete="off"><div class="invalid-feedback text-left">Login/Username is required</div></div></div></div><div class="form-row"><div class="col-12"><div class="form-group"><label for="password">Password</label><input class="form-control" type="password" id="password" name="password" required autocomplete="off"><div class="invalid-feedback text-left">Password is required</div></div></div></div><div class="form-row"><div class="col-12"><div class="form-group"><label for="street-address">Address</label><input class="form-control" type="text" id="street-address" name="street_address" required autocomplete="off"><div class="invalid-feedback text-left">Street Address is required</div></div></div></div><div class="form-row"><div class="col-12"><div class="form-group"><label for="city">City</label><input class="form-control" type="text" id="city" name="city" required autocomplete="off"><div class="invalid-feedback text-left">City is required</div></div></div></div><div class="form-row"><div class="col-12"><div class="form-group d-flex flex-column" id="state-id-parent"><label class="text-left" for="state">State</label><select class="form-control" id="state-id" name="state_id" required><option>Nothing has been selected</option>'+t+'</select><div class="invalid-feedback text-left">State is required</div></div></div></div><div class="form-row"><div class="col-12"><div class="form-group"><label for="zip">Zip</label><input class="form-control" type="text" id="zip" name="zip" required autocomplete="off"><div class="invalid-feedback text-left">Zip is required</div></div></div></div></form>',showConfirmButton:!0,confirmButtonText:'Next <i class="material-icons">arrow_right</i>',showDenyButton:!0,denyButtonText:'<i class="material-icons">arrow_left</i> Back',reverseButtons:!0,showCloseButton:!0,showLoaderOnConfirm:!0,preConfirm:()=>{let e={},t=$("#create_operator_form :input"),o=!0;if(t.each(function(){$(this).is(":valid")||(o=!1,$("#create_operator_form").addClass("was-validated"),Swal.showValidationMessage("Information is incomplete. Fill all fields."))}),o)return t.each(function(){let t=$(this).attr("name"),o="operator."+t;sessionStorage.setItem(o,$(this).val()),e[t]=$(this).val()}),sessionStorage.setItem("operator.created","true"),createOperator(e).then(e=>{if(e.message)throw new Error(e.message);return e}).catch(e=>{Swal.showValidationMessage(`Unable to save operator: ${e}`)})},didOpen:()=>{$("#state-id").select2({dropdownParent:".swal2-container"})}}).then(e=>{e.isDenied?showAddAlert():e.isConfirmed&&$.when(getOperators(),getStatuses()).then((e,t)=>{showFranchiseCreationAlert(e,t)})})},showFranchiseCreationAlert=(e,t)=>{const o=Swal.mixin({customClass:{confirmButton:"btn btn-success",denyButton:"btn btn-default"},buttonsStyling:!1});let a="",i=sessionStorage.getItem("operator.user_login");for(let t=0;t<e.length;t++){let o=e[t].operator_id,n=e[t].operator_first_name+" "+e[t].operator_last_name;a+=`<option value="${o}"${i===o?" selected":null}>${n} (${o})</option>`}let n="";for(let e=0;e<t.length;e++)n+=`<option value="${t[e]}">${t[e]}</option>`;o.fire({title:"Add Franchise",html:'<p>Step 1: Franchise Information</p><form id="franchise_form" novalidate><div class="form-row"><div class="col-12"><div class="form-group d-flex flex-column" id="operator_id_parent"><label for="operator_id" class="text-left">Operator</label><select class="form-control" id="operator_id" name="operator_id" required><option value="0">(Choose One)</option>'+a+'</select><div class="invalid-feedback text-left">Operator is required</div></div></div></div><div class="form-row"><div class="col-12"><div class="form-group"><label for="name">Franchise Name</label><input class="form-control" type="text" id="name" name="name" required autocomplete="off"><div class="invalid-feedback text-left">Franchise Name is required</div></div></div></div><div class="form-row"><div class="col-12"><div class="form-group"><label for="description">Location Description</label><textarea class="form-control" id="description" name="description" required autocomplete="off"></textarea><div class="invalid-feedback text-left">Location Description is required</div></div></div></div><div class="form-row"><div class="col-12"><div class="form-group d-flex flex-column" id="status_parent"><label for="status" class="text-left">Status</label><select class="form-control" id="status" name="status" required><option value="0">(Choose One)</option>'+n+'</select><div class="invalid-feedback text-left">Status is required</div></div></div></div></form>',didOpen:()=>{let e=$(".swal2-container");$("#operator_id").select2({dropdownParent:e}),$("#status").select2({dropdownParent:e})},showCloseButton:!0,showConfirmButton:!0,confirmButtonText:'Next <i class="material-icons">arrow_right</i>',showDenyButton:!0,denyButtonText:'<i class="material-icons">arrow_left</i> Back',reverseButtons:!0,showLoaderOnConfirm:!0,preConfirm:()=>{let e=$("#franchise_form :input, #franchise_form select"),t=!0;if(e.each(function(){$(this).is(":valid")||($("#franchise_form").addClass("was-validated"),Swal.showValidationMessage("Information is incomplete. Fill all fields."),t=!1)}),t){let t={};return e.each(function(){let e="franchise."+$(this).attr("name");sessionStorage.setItem(e,$(this).val()),t[$(this).attr("name")]=$(this).val()}),createFranchise(t).catch(e=>{Swal.showValidationMessage(`Franchise could not be created. Server issue: ${e.message}`)})}}}).then(e=>{if(e.isConfirmed)sessionStorage.clear(),sessionStorage.setItem("franchise_id",e.value.franchise_id),$.when(getStates()).then(e=>{showLocationAlert(e)});else if(e.isDenied){"true"===sessionStorage.getItem("operator.created")?showOperatorCreationAlert():showAddAlert()}})},showLocationAlert=e=>{let t="";e.forEach(e=>{t+=`<option value="${e.state_id}">${e.full_name}</option>`});Swal.mixin({customClass:{confirmButton:"btn btn-success",denyButton:"btn btn-default"},buttonsStyling:!1}).fire({title:"Add Franchise",html:'<p>Step 2: Locations</p><form id="location-form" novalidate>'+`<input type="hidden" name="franchise_id" id="franchise_id" value="${sessionStorage.getItem("franchise_id")}">`+'<div class="card" id="dropdown-parent"><div class="card-header card-header-primary card-header-tabs"><div><div class="nav-tabs-wrapper"><span class="nav-tabs-title">Locations:</span><ul class="nav nav-tabs" data-tabs="tabs" id="tabs"><li class="nav-item"><a href="#location1" class="nav-link active" data-toggle="tab" id="location1-tab">New Location</a></li><button type="button" id="add-location-btn" class="ml-2 bg-white text-dark btn btn-round btn-sm btn-just-icon"><i class="material-icons">add</i></button></ul></div></div></div><div class="card-body"><div class="tab-content" id="location-panes"><div class="tab-pane active show" id="location1"><div class="form-row"><div class="col-12"><div class="form-group"><label for="location1-name">Location Name</label><input class="form-control location-name" type="text" id="location1-name" name="location[1][name]" required autocomplete="off"><div class="invalid-feedback text-left">Location Name is required</div></div></div></div><div class="form-row"><div class="col-12"><div class="form-group"><label for="location1-address">Address</label><input class="form-control" type="text" id="location1-address" name="location[1][address]" required autocomplete="off"><div class="invalid-feedback text-left">Address is required</div></div></div></div><div class="form-row"><div class="col-12"><div class="form-group"><label for="location1-city">City</label><input class="form-control" type="text" id="location1-city" name="location[1][city]" required autocomplete="off"><div class="invalid-feedback text-left">City is required</div></div></div></div><div class="form-row"><div class="col-12"><div class="form-group d-flex flex-column text-left" id="location1-state-parent"><label for="location1-state_id" class="text-left">State</label><select class="form-control text-left" id="location1-state_id" name="location[1][state_id]" required>'+t+'</select><div class="invalid-feedback text-left">State is required</div></div></div></div><div class="form-row"><div class="col-12"><div class="form-group"><label for="location1-zip">Zip</label><input class="form-control" type="text" id="location1-zip" name="location[1][zip]" required autocomplete="off"><div class="invalid-feedback text-left">Zip is required</div></div></div></div><div class="form-row"><div class="col-12"><div class="form-group d-flex flex-column text-left" id="status_parent"><label for="location1-cities" class="text-left">Cities</label><select class="form-control text-left" id="location1-cities" name="location[1][cities][]" multiple required></select><div class="invalid-feedback text-left">Cities are required</div></div><div class="form-row"><div class="col-12"><div class="form-group d-flex flex-column text-left" id="status_parent"><label for="location1-zip_codes" class="text-left">Zip Codes</label><select class="form-control text-left" id="location1-zip_codes" name="location[1][zip_codes][]" multiple required></select><div class="invalid-feedback text-left">Zip Codes is required</div></div><div class="form-row"><div class="col-12"><button id="first-remove-btn" type="button" class="btn btn-sm btn-danger location-pane-remove-btn" disabled>Cannot Remove Only Location</button></div></div></div></div></div></div></form>',didOpen:()=>{document.getElementById("first-remove-btn").addEventListener("click",()=>{removeLocationPane("location1","location1-tab")}),document.getElementById("add-location-btn").addEventListener("click",()=>{let t=newLocationTab({states:e}),o=document.createElement("div");o.classList.add("tab-pane"),o.id=`location${locationCount}`,t.forEach(e=>{o.appendChild(e)}),document.getElementById("location-panes").appendChild(o);let a=document.createElement("li");a.classList.add("nav-item");let i=document.createElement("a");i.classList.add("nav-link"),i.href=`#location${locationCount}`,i.setAttribute("data-toggle","tab"),i.id=`location${locationCount}-tab`,i.textContent="New Location",a.appendChild(i),document.getElementById("tabs").insertBefore(a,document.getElementById("add-location-btn"));let n=$(".swal2-container");$(`#location${locationCount}-state_id`).select2({dropdownParent:n,width:"100%",allowClear:!0,placeholder:"Nothing Has Been Selected"}),$(`#location${locationCount}-cities`).select2({dropdownParent:n,tags:!0,width:"100%"}),$(`#location${locationCount}-zip_codes`).select2({dropdownParent:n,tags:!0,width:"100%"}),$(`#location${locationCount}-tab`).tab("show")})},preConfirm:()=>sendLocations(marshalLocationData()).catch(e=>{Swal.showValidationMessage(e)}),showLoaderOnConfirm:!0,showCloseButton:!0,showConfirmButton:!0,confirmButtonText:'Finish <i class="material-icons">arrow_right</i>',showDenyButton:!0,denyButtonText:'<i class="material-icons">arrow_left</i> Back',reverseButtons:!0,width:"800px"}).then(e=>{e.isConfirmed&&(console.log(e.value),showFranchiseSuccessAlert())});let o=$(".swal2-container");$("#location1-state_id").select2({dropdownParent:o,allowClear:!0,placeholder:"Nothing Has Been Selected"}),$("#location1-cities").select2({dropdownParent:o,tags:!0}),$("#location1-zip_codes").select2({dropdownParent:o,tags:!0}),document.querySelector(".location-name").addEventListener("input",function(){document.querySelector(".nav-link.active").textContent=""!==this.value?this.value:"New Location"})},showFranchiseSuccessAlert=()=>{Swal.fire({title:"Success",icon:"success",text:"The franchise has been created!"})},getOperators=async()=>{return(await fetch("/operators/get-operators",{method:"GET",mode:"cors",cache:"no-cache",headers:{"Content-Type":"application/json",Accept:"application/json"}})).json()},getStatuses=async()=>{return(await fetch("/franchises/get-statuses",{method:"GET",mode:"cors",cache:"no-cache",headers:{"Content-Type":"application/json"}})).json()},createOperator=async e=>{return(await fetch("/operators/create",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json","X-Csrf-Token":csrfToken},body:JSON.stringify(e)})).json()},createFranchise=async e=>{let t=new URLSearchParams(e);return(await fetch("/franchises/create",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/x-www-form-urlencoded","X-Csrf-Token":csrfToken},body:t}).catch(e=>{throw new Error(`Could not add franchise: ${e.statusText}`)})).json()};let locationCount=1;const newLocationTab=e=>{locationCount++;let t=[];e.states.forEach(e=>{t.push({value:e.state_id,text:e.full_name})});let o={text:{name:{label:"Location Name",id:`location${locationCount}-name`,name:`location[${locationCount}]name`,abbrev:"name"},address:{label:"Address",id:`location${locationCount}-address`,name:`location[${locationCount}][address]`,abbrev:"address"},city:{label:"City",id:`location${locationCount}-city`,name:`location[${locationCount}][city]`,abbrev:"city"},zip:{label:"Zip",id:`location${locationCount}-zip`,name:`location[${locationCount}][zip]`,abbrev:"zip"}},single:{state:{label:"State",id:`location${locationCount}-state_id`,name:`location[${locationCount}][state_id]`,options:t}},multiple:{cities:{label:"Cities",id:`location${locationCount}-cities`,name:`location[${locationCount}][cities][]`},zips:{label:"Zip Codes",id:`location${locationCount}-zip_codes`,name:`location[${locationCount}][zip_codes][]`}}},a=[];return a.push(createTextField(o.text.name)),a.push(createTextField(o.text.address)),a.push(createTextField(o.text.city)),a.push(createSingleSelect(o.single.state)),a.push(createTextField(o.text.zip)),a.push(createMultipleSelect(o.multiple.cities)),a.push(createMultipleSelect(o.multiple.zips)),a.push(createRemoveButton()),a},createRemoveButton=e=>{let t=document.createElement("div"),o=document.createElement("div"),a=document.createElement("button");a.type="button",a.classList.add("btn","btn-sm","btn-danger","location-pane-remove-btn"),a.disabled=!1,a.textContent="Remove Location";const i=`location${locationCount}`,n=`location${locationCount}-tab`;return a.addEventListener("click",()=>{removeLocationPane(i,n)}),o.classList.add("col-12"),t.classList.add("form-row"),o.appendChild(a),t.appendChild(o),document.querySelectorAll(".location-pane-remove-btn").forEach(e=>{e.disabled=!1,e.textContent="Remove Location"}),t},createTextField=e=>{let t=document.createElement("div"),o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("label"),n=document.createElement("input"),s=document.createElement("div");return t.classList.add("form-row"),o.classList.add("col-12"),a.classList.add("form-group"),i.setAttribute("for",e.id),i.textContent=e.label,n.setAttribute("type","text"),n.id=e.id,n.required=!0,n.classList.add("form-control"),n.setAttribute("name",e.name),"name"===e.abbrev&&(n.classList.add("location-name"),n.addEventListener("input",function(){document.querySelector(".nav-link.active").textContent=""!==this.value?this.value:"New Location"})),s.classList.add("invalid-feedback"),s.classList.add("text-left"),s.textContent=`${e.label} is required.`,a.appendChild(i),a.appendChild(n),a.appendChild(s),o.appendChild(a),t.appendChild(o),t},createSingleSelect=e=>{let t=document.createElement("div"),o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("label"),n=document.createElement("select"),s=document.createElement("option"),l=document.createElement("div");return t.classList.add("form-row"),o.classList.add("col-12"),a.classList.add("form-group"),a.classList.add("d-flex"),a.classList.add("flex-column"),a.classList.add("text-left"),i.setAttribute("for",e.id),i.textContent=e.label,n.setAttribute("name",e.name),n.id=e.id,n.required=!0,n.classList.add("form-control"),s.value=null,s.textContent="Nothing Has Been Selected",l.classList.add("invalid-feedback"),l.classList.add("text-left"),l.textContent=`${e.label} is required.`,n.appendChild(s),e.options.forEach(e=>{let t=document.createElement("option");t.value=e.value,t.textContent=e.text,n.appendChild(t)}),a.appendChild(i),a.appendChild(n),a.appendChild(l),o.appendChild(a),t.appendChild(o),t},createMultipleSelect=e=>{let t=document.createElement("div"),o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("label"),n=document.createElement("select"),s=document.createElement("div");return t.classList.add("form-row"),o.classList.add("col-12"),a.classList.add("form-group"),a.classList.add("d-flex"),a.classList.add("flex-column"),a.classList.add("text-left"),i.setAttribute("for",e.id),i.textContent=e.label,n.setAttribute("name",e.name),n.id=e.id,n.required=!0,n.multiple=!0,n.classList.add("form-control"),s.classList.add("invalid-feedback"),s.classList.add("text-left"),s.textContent=`${e.label} is required.`,a.appendChild(i),a.appendChild(n),a.appendChild(s),o.appendChild(a),t.appendChild(o),t},addLocations=async(e,t)=>{return(await fetch(`locations/add/${e}`,{body:JSON.stringify(t),method:"POST",headers:{"X-Csrf-Token":csrfToken,Accept:"application/json","Content-Type":"application/json"}})).json()};document.querySelectorAll(".location-pan-remove-btn").forEach(e=>{e.addEventListener("click",()=>{top.alert("good")})});const removeLocationPane=(e,t)=>{let o=document.getElementById(e),a=o.previousElementSibling?o.previousElementSibling:o.nextElementSibling;for(o.remove();a&&!a.matches(".tab-pane");)a=a.previousElementSibling;let i=document.querySelectorAll(".location-pane-remove-btn");1===i.length&&i.forEach(e=>{e.disabled=!0,e.textContent="Cannot Remove Only Location"}),document.getElementById(t).remove();$(`#${a.id}-tab`).tab("show")},marshalLocationData=()=>new FormData(document.getElementById("location-form")),sendLocations=async e=>{const t=new URLSearchParams(e);let o=await fetch("/locations/add-many",{headers:{Accept:"application/json","X-Csrf-Token":csrfToken},method:"POST",body:t});if(!o.ok)throw new Error("Could not send new locations");return o.json()};