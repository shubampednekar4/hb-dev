const getStates=async()=>{let e=await fetch("/states/get-all",{method:"GET",headers:{Accept:"application/json"}});if(200!==e.status)throw new Error("States could not be fetched");return e.json()},renderLocationForm=e=>{let t="";return e.forEach(e=>{t+=`<option value="${e.state_id}">${e.full_name}</option>`}),'<form id="location-form" novalidate><div class="tab-content" id="location-panes"><div class="tab-pane active show" id="location1"><div class="form-row"><div class="col-12"><div class="form-group"><label for="location-name">Location Name</label><input class="form-control" type="text" id="location-name" name="name" required autocomplete="off"><div class="invalid-feedback text-left">Location Name is required</div></div></div></div><div class="form-row"><div class="col-12"><div class="form-group"><label for="address">Address</label><input class="form-control" type="text" id="address" name="address" required autocomplete="off"><div class="invalid-feedback text-left">Address is required</div></div></div></div><div class="form-row"><div class="col-12"><div class="form-group"><label for="city">City</label><input class="form-control" type="text" id="city" name="city" required autocomplete="off"><div class="invalid-feedback text-left">City is required</div></div></div></div><div class="form-row"><div class="col-12"><div class="form-group d-flex flex-column text-left" id="state-parent"><label for="state_id" class="text-left">State</label><select data-parent="state-parent" class="form-control text-left location-select" id="state_id" name="state_id" required>'+t+'</select><div class="invalid-feedback text-left">State is required</div></div></div></div><div class="form-row"><div class="col-12"><div class="form-group"><label for="zip">Zip</label><input class="form-control" type="text" id="zip" name="zip" required autocomplete="off"><div class="invalid-feedback text-left">Zip is required</div></div></div></div><div class="form-row"><div class="col-12"><div class="form-group d-flex flex-column text-left" id="cities_parent"><label for="cities" class="text-left">Cities</label><select data-parent="cities_parent"  class="form-control text-left location-select" id="cities" name="cities[]" multiple required></select><div class="invalid-feedback text-left">Cities are required</div></div><div class="form-row"><div class="col-12"><div class="form-group d-flex flex-column text-left" id="zips_parent"><label for="location1-zip_codes" class="text-left">Zip Codes</label><select data-parent="zips_parent" class="form-control text-left location-select" id="zip_codes" name="zips[]" multiple required></select><div class="invalid-feedback text-left">Zip Codes is required</div></div></form>'},validateForm=e=>{let t=!0,i=!1,a=document.getElementById(e),l=document.querySelectorAll(`#${e} input`);try{l.forEach(e=>{let i=findInvalidTextContainer(e);if(i.textContent="",e instanceof HTMLInputElement)e.checkValidity()||(t=!1,i.textContent=e.validationMessage);else{if(!(e instanceof HTMLTextAreaElement))throw t=!1,new TypeError(`Expected instance of HTMLInputElement or HTMLTextareaElement, got ${typeof e} instead`);""===e.value&&e.required&&(t=!1,i.textContent="This field cannot be empty")}})}catch(e){i=!0,handleError(e)}return t||a.classList.add("was-validated"),t&&!i},findInvalidTextContainer=e=>{let t=e.nextElementSibling;try{for(;!t.matches(".invalid-feedback");)t=t.nextElementSibling}catch(e){return document.createElement("div")}return t},handleError=e=>{console.error(`An error occurred while validating data: ${e}`),swal.fire({title:"Validation Error",text:"An error occurred while validating data. Change not submitted. See below message.",icon:"error",didOpen:()=>{swal.showValidationMessage(e)}})},handleGeneralError=e=>{console.error(`An error and needs to be corrected: ${e}`),swal.fire({title:"Validation Error",text:"An error and needs to be corrected. See below message.",icon:"error",didOpen:()=>{swal.showValidationMessage(e)}})};